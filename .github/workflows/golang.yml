# Copyright 2024 NVIDIA CORPORATION
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Golang

on:
  push:
    branches:
      - main
      - release-*
      - "pull-request/[0-9]+"

jobs:
  check:
    runs-on: linux-amd64-cpu4
    permissions:
      contents: read
      id-token: write
    steps:
    - uses: actions/checkout@v4
      name: Checkout code
    - name: Get Golang version
      id: vars
      run: |
        GOLANG_VERSION=$(./hack/golang-version.sh)
        echo "GOLANG_VERSION=${GOLANG_VERSION##GOLANG_VERSION := }" >> $GITHUB_ENV
    - name: Install Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GOLANG_VERSION }}
    - name: Lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: -v --timeout 5m
        skip-cache: true
    - name: Setup JFrog CLI
      id: jfrog
      uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: https://${{ secrets.OIDC_ARTIFACTORY_ENDPOINT }}/
        OIDC_ARTIFACTORY_ENDPOINT: ${{ secrets.OIDC_ARTIFACTORY_ENDPOINT }}
      with:
        oidc-provider-name: nvgithub
        oidc-audience: ${{ secrets.OIDC_ARTIFACTORY_ENDPOINT }}
        cache: true
    - name: Check golang modules
      env:
        OIDC_USER: ${{ steps.jfrog.outputs.oidc-user }}
        OIDC_TOKEN: ${{ steps.jfrog.outputs.oidc-token }}
        OIDC_ARTIFACTORY_ENDPOINT: ${{ secrets.OIDC_ARTIFACTORY_ENDPOINT }}
      run: |
        OIDC_USER_ENCODED=$(python3 -c 'import urllib.parse, os; print(urllib.parse.quote_plus(os.environ["OIDC_USER"]))')
        export GOPROXY="https://${OIDC_USER_ENCODED}:${OIDC_TOKEN}@${OIDC_ARTIFACTORY_ENDPOINT}/artifactory/api/go/edge-go-remote-virtual"
        make check-vendor
    - name: Check generated assets
      env:
        OIDC_USER: ${{ steps.jfrog.outputs.oidc-user }}
        OIDC_TOKEN: ${{ steps.jfrog.outputs.oidc-token }}
        OIDC_ARTIFACTORY_ENDPOINT: ${{ secrets.OIDC_ARTIFACTORY_ENDPOINT }}
      run: |
        OIDC_USER_ENCODED=$(python3 -c 'import urllib.parse, os; print(urllib.parse.quote_plus(os.environ["OIDC_USER"]))')
        export GOPROXY="https://${OIDC_USER_ENCODED}:${OIDC_TOKEN}@${OIDC_ARTIFACTORY_ENDPOINT}/artifactory/api/go/edge-go-remote-virtual"
        make validate-generated-assets
  test:
    name: Unit test
    runs-on: linux-amd64-cpu4
    permissions:
      contents: read
      id-token: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Get Golang version
      id: vars
      run: |
        GOLANG_VERSION=$(./hack/golang-version.sh)
        echo "GOLANG_VERSION=${GOLANG_VERSION##GOLANG_VERSION ?= }" >> $GITHUB_ENV
    - name: Install Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GOLANG_VERSION }}
    - name: Setup JFrog CLI
      id: jfrog
      uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: https://${{ secrets.OIDC_ARTIFACTORY_ENDPOINT }}/
        OIDC_ARTIFACTORY_ENDPOINT: ${{ secrets.OIDC_ARTIFACTORY_ENDPOINT }}
      with:
        oidc-provider-name: nvgithub
        oidc-audience: ${{ secrets.OIDC_ARTIFACTORY_ENDPOINT }}
        cache: true
    - name: Run Coverage
      env:
        OIDC_USER: ${{ steps.jfrog.outputs.oidc-user }}
        OIDC_TOKEN: ${{ steps.jfrog.outputs.oidc-token }}
        OIDC_ARTIFACTORY_ENDPOINT: ${{ secrets.OIDC_ARTIFACTORY_ENDPOINT }}
      run: |
        OIDC_USER_ENCODED=$(python3 -c 'import urllib.parse, os; print(urllib.parse.quote_plus(os.environ["OIDC_USER"]))')
        export GOPROXY="https://${OIDC_USER_ENCODED}:${OIDC_TOKEN}@${OIDC_ARTIFACTORY_ENDPOINT}/artifactory/api/go/edge-go-remote-virtual"
        make coverage
  build:
    name: Build
    runs-on: linux-amd64-cpu4
    permissions:
      contents: read
      id-token: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Get Golang version
      id: vars
      run: |
        GOLANG_VERSION=$(./hack/golang-version.sh)
        echo "GOLANG_VERSION=${GOLANG_VERSION##GOLANG_VERSION ?= }" >> $GITHUB_ENV
    - name: Install Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GOLANG_VERSION }}
    - name: Setup JFrog CLI
      id: jfrog
      uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: https://${{ secrets.OIDC_ARTIFACTORY_ENDPOINT }}/
        OIDC_ARTIFACTORY_ENDPOINT: ${{ secrets.OIDC_ARTIFACTORY_ENDPOINT }}
      with:
        oidc-provider-name: nvgithub
        oidc-audience: ${{ secrets.OIDC_ARTIFACTORY_ENDPOINT }}
        cache: true
    - name: Run Build
      env:
        OIDC_USER: ${{ steps.jfrog.outputs.oidc-user }}
        OIDC_TOKEN: ${{ steps.jfrog.outputs.oidc-token }}
        OIDC_ARTIFACTORY_ENDPOINT: ${{ secrets.OIDC_ARTIFACTORY_ENDPOINT }}
      run: |
        OIDC_USER_ENCODED=$(python3 -c 'import urllib.parse, os; print(urllib.parse.quote_plus(os.environ["OIDC_USER"]))')
        export GOPROXY="https://${OIDC_USER_ENCODED}:${OIDC_TOKEN}@${OIDC_ARTIFACTORY_ENDPOINT}/artifactory/api/go/edge-go-remote-virtual"
        make build
