# Copyright 2024 NVIDIA CORPORATION
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Run this workflow on pull requests or merge to main/release branches
name: Image

on:
  push:
    branches:
      - main
      - release-*
      - "pull-request/[0-9]+"

jobs:
  build-image-arm64:
    runs-on: linux-arm64-cpu4
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
      - uses: actions/checkout@v5
        name: Check out code
      - name: Calculate build vars
        id: vars
        run: |
          echo "COMMIT_SHORT_SHA=${GITHUB_SHA:0:8}" >> $GITHUB_ENV
          echo "LOWERCASE_REPO_OWNER=$(echo "${GITHUB_REPOSITORY_OWNER}" | awk '{print tolower($0)}')" >> $GITHUB_ENV
          REPO_FULL_NAME="${{ github.event.pull_request.head.repo.full_name }}"
          echo "${REPO_FULL_NAME}"
          echo "LABEL_IMAGE_SOURCE=https://github.com/${REPO_FULL_NAME}" >> $GITHUB_ENV

          GENERATE_ARTIFACTS="false"
          if [[ "${{ github.actor }}" == "dependabot[bot]" ]]; then
            GENERATE_ARTIFACTS="false"
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.head.repo.full_name }}" == "${{ github.repository }}" ]]; then
            GENERATE_ARTIFACTS="true"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            GENERATE_ARTIFACTS="true"
          fi
          echo "PUSH_ON_BUILD=${GENERATE_ARTIFACTS}" >> $GITHUB_ENV
          echo "BUILD_MULTI_ARCH_IMAGES=${GENERATE_ARTIFACTS}" >> $GITHUB_ENV
          echo "DOCKER_BUILD_PLATFORM_OPTIONS=--platform=linux/arm64" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config: /etc/buildkit/buildkitd.toml
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Go Proxy
        id: setup-go-proxy
        uses: nv-gha-runners/setup-artifactory-go-proxy@main
      - name: Build image
        env:
          IMAGE_NAME: ghcr.io/${LOWERCASE_REPO_OWNER}/k8s-nim-operator
          VERSION: ${COMMIT_SHORT_SHA}-arm64
          GOPROXY: ${{ steps.setup-go-proxy.outputs.goproxy-url }}
        run: |
          echo "${VERSION}"
          make -f deployments/container/Makefile build
  build-image-amd64:
    runs-on: linux-amd64-cpu4
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
      - uses: actions/checkout@v4
        name: Check out code
      - name: Calculate build vars
        id: vars
        run: |
          echo "COMMIT_SHORT_SHA=${GITHUB_SHA:0:8}" >> $GITHUB_ENV
          echo "LOWERCASE_REPO_OWNER=$(echo "${GITHUB_REPOSITORY_OWNER}" | awk '{print tolower($0)}')" >> $GITHUB_ENV
          REPO_FULL_NAME="${{ github.event.pull_request.head.repo.full_name }}"
          echo "${REPO_FULL_NAME}"
          echo "LABEL_IMAGE_SOURCE=https://github.com/${REPO_FULL_NAME}" >> $GITHUB_ENV

          GENERATE_ARTIFACTS="false"
          if [[ "${{ github.actor }}" == "dependabot[bot]" ]]; then
            GENERATE_ARTIFACTS="false"
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.head.repo.full_name }}" == "${{ github.repository }}" ]]; then
            GENERATE_ARTIFACTS="true"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            GENERATE_ARTIFACTS="true"
          fi
          echo "PUSH_ON_BUILD=${GENERATE_ARTIFACTS}" >> $GITHUB_ENV
          echo "BUILD_MULTI_ARCH_IMAGES=${GENERATE_ARTIFACTS}" >> $GITHUB_ENV
          echo "DOCKER_BUILD_PLATFORM_OPTIONS=--platform=linux/amd64" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config: /etc/buildkit/buildkitd.toml
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Go Proxy
        id: setup-go-proxy
        uses: nv-gha-runners/setup-artifactory-go-proxy@main
      - name: Build image
        env:
          IMAGE_NAME: ghcr.io/${LOWERCASE_REPO_OWNER}/k8s-nim-operator
          VERSION: ${COMMIT_SHORT_SHA}-amd64
          GOPROXY: ${{ steps.setup-go-proxy.outputs.goproxy-url }}
        run: |
          echo "${VERSION}"
          make -f deployments/container/Makefile build
  build-image-multi-arch:
    runs-on: linux-amd64-cpu4
    permissions:
      contents: read
      id-token: write
      packages: write
    needs: [build-image-amd64, build-image-arm64]
    steps:
      - uses: actions/checkout@v4
        name: Check out code
      - name: Calculate build vars
        id: vars
        run: |
          echo "COMMIT_SHORT_SHA=${GITHUB_SHA:0:8}" >> $GITHUB_ENV
          echo "LOWERCASE_REPO_OWNER=$(echo "${GITHUB_REPOSITORY_OWNER}" | awk '{print tolower($0)}')" >> $GITHUB_ENV
      - name: Extract branch name for push events
        if: github.event_name == 'push'
        id: extract_branch
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # Always create/push the commit-SHA manifest
      - name: Build Manifest (commit SHA)
        env:
          OPERATOR_IMAGE_ARM: ghcr.io/${{ env.LOWERCASE_REPO_OWNER }}/k8s-nim-operator:${{ env.COMMIT_SHORT_SHA }}-arm64
          OPERATOR_IMAGE_AMD: ghcr.io/${{ env.LOWERCASE_REPO_OWNER }}/k8s-nim-operator:${{ env.COMMIT_SHORT_SHA }}-amd64
          OPERATOR_MULTIARCH_IMAGE: ghcr.io/${{ env.LOWERCASE_REPO_OWNER }}/k8s-nim-operator:${{ env.COMMIT_SHORT_SHA }}
        run: |
          docker manifest create \
            "${OPERATOR_MULTIARCH_IMAGE}" \
            "${OPERATOR_IMAGE_AMD}" \
            "${OPERATOR_IMAGE_ARM}"
          docker manifest push "${OPERATOR_MULTIARCH_IMAGE}"
      # Only create/push the branch-name manifest on main or release-* branches
      - name: Build Manifest (branch tag)
        if: ${{ github.ref_name == 'main' || startsWith(github.ref_name, 'release-') }}
        env:
          OPERATOR_IMAGE_ARM: ghcr.io/${{ env.LOWERCASE_REPO_OWNER }}/k8s-nim-operator:${{ env.COMMIT_SHORT_SHA }}-arm64
          OPERATOR_IMAGE_AMD: ghcr.io/${{ env.LOWERCASE_REPO_OWNER }}/k8s-nim-operator:${{ env.COMMIT_SHORT_SHA }}-amd64
          OPERATOR_MULTIARCH_IMAGE_BRANCH: ghcr.io/${{ env.LOWERCASE_REPO_OWNER }}/k8s-nim-operator:${{ env.BRANCH }}
        run: |
          docker manifest create \
            "${OPERATOR_MULTIARCH_IMAGE_BRANCH}" \
            "${OPERATOR_IMAGE_AMD}" \
            "${OPERATOR_IMAGE_ARM}"
          docker manifest push "${OPERATOR_MULTIARCH_IMAGE_BRANCH}"
  build-bundle:
    runs-on: ubuntu-latest
    needs: build-image-multi-arch
    steps:
      - uses: actions/checkout@v5
        name: Check out code
      - name: Calculate build vars
        id: vars
        run: |
          echo "COMMIT_SHORT_SHA=${GITHUB_SHA:0:8}" >> $GITHUB_ENV
          echo "LOWERCASE_REPO_OWNER=$(echo "${GITHUB_REPOSITORY_OWNER}" | awk '{print tolower($0)}')" >> $GITHUB_ENV
          REPO_FULL_NAME="${{ github.event.pull_request.head.repo.full_name }}"
          echo "${REPO_FULL_NAME}"
          echo "LABEL_IMAGE_SOURCE=https://github.com/${REPO_FULL_NAME}" >> $GITHUB_ENV

          GENERATE_ARTIFACTS="false"
          if [[ "${{ github.actor }}" == "dependabot[bot]" ]]; then
            GENERATE_ARTIFACTS="false"
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.head.repo.full_name }}" == "${{ github.repository }}" ]]; then
            GENERATE_ARTIFACTS="true"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            GENERATE_ARTIFACTS="true"
          fi
          echo "PUSH_ON_BUILD=${GENERATE_ARTIFACTS}" >> $GITHUB_ENV
          echo "BUILD_MULTI_ARCH_IMAGES=${GENERATE_ARTIFACTS}" >> $GITHUB_ENV
      - name: Extract branch name for push events
        id: extract_branch
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

          BRANCH="bundle-latest"
          if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "release-"* ]]; then
            BRANCH="bundle-latest-${BRANCH_NAME}"
          fi
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build image
        env:
          BUNDLE_IMAGE_NAME: ghcr.io/nvidia/k8s-nim-operator
          BUNDLE_IMAGE: ghcr.io/nvidia/k8s-nim-operator:${{ env.BRANCH_NAME }}
          VERSION: '' # Until we cut a release, Version will be null
        run: |
          sed -i "s|ghcr.io/nvidia/k8s-nim-operator:main|${BUNDLE_IMAGE}|g" bundle/manifests/k8s-nim-operator.clusterserviceversion.yaml
          make -f deployments/container/Makefile build-bundle
