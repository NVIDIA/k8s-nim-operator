# Copyright (c), NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

default:
  image: docker:dind
  tags:
    - cnt
    - container-dev
    - docker/privileged
    - os/linux
    - type/docker
  services:
    - name: docker:dind
      command: ["--experimental"]

stages:
  - lint
  - test
  - helm-lint
  - image-build
  - release

golang:lint:
  stage: lint
  image: golang:1.22.0
  needs: []
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    - git config --global --add safe.directory ${PWD}
    - git fetch origin main
  script:
    - make lint

golang:unit-tests:
  stage: test
  image: golang:1.22.0
  needs: []
  script:
    - go mod download
    - make test
  coverage: /^total:\s+\(statements\)\s+(\d+(?:\.\d+)?%)$/

helm-lint:
  stage: helm-lint
  image:
    name: alpine/git
    entrypoint: ['/usr/bin/env']
  before_script:
    - apk add --update curl curl-dev openssl bash git openssh make
    - curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
  script:
    - helm lint helm/k8s-nim-operator/

# Define the image build targets
.image-build:
  stage: image-build
  variables:
    IMAGE_NAME: "${CI_REGISTRY_IMAGE}/staging/k8s-nim-operator"
    VERSION: "v0.1.0"
    IMG: "${IMAGE_NAME}:${VERSION}-${CI_COMMIT_SHORT_SHA}"
  before_script:
    - apk add --no-cache bash make
    - 'echo "Logging in to CI registry ${CI_REGISTRY}"'
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
  script:
    - make docker-build

image-build:
  extends:
    - .image-build

# .release forms the base of the deployment jobs which push images to the CI registry.
.release:
  stage: release
  variables:
    IMAGE_NAME: "${CI_REGISTRY_IMAGE}/staging/k8s-nim-operator"
    VERSION: "v0.1.0"
    IMG: "${IMAGE_NAME}:${VERSION}-${CI_COMMIT_SHORT_SHA}"
  before_script:
    - apk add --no-cache bash make
    - 'echo "Logging in to CI registry ${CI_REGISTRY}"'
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
  script:
    - make docker-push

# Define a staging release step that pushes an image to an internal "staging" repository
# This is triggered for all pipelines (i.e. not only tags) to test the pipeline steps
# outside of the release process.
.release:staging:
  extends:
    - .release
  variables:
    OUT_REGISTRY_USER: "${CI_REGISTRY_USER}"
    OUT_REGISTRY_TOKEN: "${CI_REGISTRY_PASSWORD}"
    OUT_REGISTRY: "${CI_REGISTRY}"

release:staging:
  extends:
    - .release:staging
  needs:
    - image-build
