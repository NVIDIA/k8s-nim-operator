---
# NIM Cache Multi-LLM NIM
apiVersion: apps.nvidia.com/v1alpha1
kind: NIMCache
metadata:
  name: nim-cache-multi-llm
  namespace: nim-service
spec:
  source:
    hf:
      endpoint: "https://huggingface.co"
      namespace: "nvidia"
      authSecret: hf-api-secret
      modelPuller: nvcr.io/nim/nvidia/llm-nim:1.12
      pullSecret: ngc-secret
      modelName: "Llama-3.1-Nemotron-Nano-8B-v1"
  storage:
    pvc:
      create: true
      storageClass: local-path
      size: "50Gi"
      volumeAccessMode: ReadWriteOnce

---
# NIM Service LLM-Specific NIM with Serverless Deployment
apiVersion: apps.nvidia.com/v1alpha1
kind: NIMService
metadata:
  name: meta-llama-3-2-1b-instruct
  namespace: nim-service
spec:
  inferencePlatform: kserve
  annotations:
    # Knative concurrency-based autoscaling (default).
    autoscaling.knative.dev/class: kpa.autoscaling.knative.dev
    autoscaling.knative.dev/metric: concurrency
    # Target 10 requests in-flight per pod.
    autoscaling.knative.dev/target: "10"
    # Disable scale to zero with a min scale of 1.
    autoscaling.knative.dev/min-scale: "1"
    # Limit scaling to 100 pods.
    autoscaling.knative.dev/max-scale: "10"
  image:
    repository: nvcr.io/nim/nvidia/llm-nim
    tag: "1.12"
    pullPolicy: IfNotPresent
    pullSecrets:
      - ngc-secret
  authSecret: ngc-api-secret
  storage:
    nimCache:
      name: nim-cache-multi-llm
      profile: 'tensorrt_llm'
  resources:
    limits:
      nvidia.com/gpu: 1
      cpu: "12"
      memory: 32Gi
    requests:
      nvidia.com/gpu: 1
      cpu: "4"
      memory: 6Gi
  replicas: 1
  expose:
    service:
      type: ClusterIP
      port: 8000
